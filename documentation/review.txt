Структура приложения

class FKApplication
Объект приложения состоит из 3 компонентов: пользовательского интерфейса, ядра и интерфейса комнаты.
Компоненты объединяются между собой с помощью моста.
Все 3 компонента и QML тип моста должны быть зарегистрированы в функции main() при запуске приложения.
Далее на стороне QML происходит инстанциирование моста и его дочерних элементов - компонентов приложения.
Такой подход позволяет кастомизировать компоненты независимо друг от друга.

class FKUserInterface
Компонент приложения предназначен для взаимодействия с пользователем.
Может быть как консольным, так и графическим
Возможность обработки текстовых команд обеспечивается установкой обработчика ввода и подключением его к источнику ввода
На стороне QML пользовательский интерфейс должен иметь загружаемый элемент, который будет являться корневым компонентом комнаты

class FKSimpleCore
Класс ядра состоит из инфраструктур и может содержать по 1 инфраструктуре каждого типа: реалм (сервер учетных записей), сервер (исполнитель игровой логики), клиент (медиатор пользователей).
Наличие всех 3 инфраструктур обязательно для запуска комнаты, но располагаться при этом они могут в разных приложениях.
Инфраструктуры кастомизируются и при необходимости могут реализовываться на общих ресурсах (например, клиент и сервер в одиночных играх)
Базовая реализация запускает каждую инфраструктуру в отдельном потоке и обеспечивает их каналами связи внутри одного приложения.
	FKRealm			- инфраструктура, управляющая учетными записями пользователей и серверов. Устанавливает правила создания и поиска комнат, а так же обеспечивает поиск серверов и клиентов.
	FKServerInfrastructure	- инфраструктура, обеспечивающая выполнение игровой логики. Сервер принимает от реалма приглашения для пользователей и регистрирует их.
				  В базовой реализации сервер получает приказы от клиентов, проверяет их на допустимость, и отправляет в контекст комнаты.
				  Из контекста комнаты он получает события и распределяет их по клиентам.
	FKClientInfrastructure 	- инфраструктура, отражающая изменения на стороне клиента и обеспечиваяющая сообщение с сервером.
				  В базовой реализации клиент получает события от сервера и безусловно отправляет их в контекст комнаты.
				  Из контекста комнаты он получает сгенерированные пользователем приказы и отправляет их на сервер.

class FKRoomEngine
Класс интерфейса комнаты обеспечивает динамическую загрузку, инкапсулирует всю логику работы модуля комнаты и представляет интерфейсы доступа к ней.
Кроме того, данный класс управляет контекстами комнат, в рамках которых происходит выполнение логики комнаты.
В рамках одного приложения может быть создано любое количество контекстов (для сервера и для пользователей)
	FKRoomContext - класс, инкапсулирующий отдельную сессию игровой логики.
			Контекст может принимать приказы и события из внешних источников или испускать события и приказы, сгенерированные выполнением логики комнаты.
			Со стороны пользователя доступ к контексту осуществляется через QML делегаты (расположенные в пользовательском интерфейсе) объектов, расположенных в контексте.
			Пользовательский интерфейс принимает событие ввода и отправляет его на обработу в соответсвующий контекст.